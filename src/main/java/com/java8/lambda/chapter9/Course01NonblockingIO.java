package com.java8.lambda.chapter9;

/**
 * 	为什么要使用非阻塞式I/O
 *	
 *	假设要编写一个支持大量用户的聊天程序。
 *	
 *	每当用户连接到聊天服务器时，都要和服务器建立一个 TCP 连接。
 *	使用传统的线程模型，每次向用户写数据时，都要调用一个方法向用户传输数据，这个方法会阻塞当前线程。
 *	这种 I/O 方式叫阻塞式 I/O，是一种通用且易于理解的方式，因为和程序用户的交互通常符合这样一种顺序执行的方式。
 *	缺点是，将系统扩展至支持大量用户时，需要和服务器建立大量 TCP 连接，因此扩展性不是很好。
 *	
 *	非阻塞式 I/O，有时也叫异步 I/O，可以处理大量并发网络连接，而且一个线程可以为多个连接服务。
 *	和阻塞式 I/O 不同，对聊天程序客户端的读写调用立即返回，真正的读写操作则在另一个独立的线程执行，这样就可以同时执行其他任务了。
 *
 *	Java 标准类库的 NIO 提供了非阻塞式 I/O 的接口，NIO 的最初版本用到了Selector 的概念，让一个线程管理多个通信管道，比如向客户端写数据的网络套接字。
 *
 *	@author hzweiyongqiang
 */
public class Course01NonblockingIO {

}
