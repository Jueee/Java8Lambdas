package com.java8.lambda.chapter9;

/**
 * 	何时何地使用新技术
 *	
 *	事件驱动和响应式应用正在变得越来越流行，而且经常会是为你的问题建模的最好方式之一。
 *
 *	响应式编程宣言（http://www.reactivemanifesto.org/）鼓励大家使用这种方式编写更多应用，如果它适合你的待解问题，那么就应该使用。
 *	
 *
 *
 *	相比阻塞式设计，有两种情况可能特别适合使用响应式或事件驱动的方式来思考：
 *
 *	第一种情况是业务逻辑本身就使用事件来描述。
 *		Twitter 就是一个经典例子。Twitter 是一种订阅文字流信息的服务，用户彼此之间推送信息。
 *		使用事件驱动架构编写应用，能准确地为业务建模。
 *		图形化展示股票价格可能是另一个例子，每一次价格的变动都可认为是一个事件。
 *
 *	另一种显然的用例是应用需要同时处理大量 I/O 操作。
 *		阻塞式 I/O 需要同时使用大量线程，这会导致大量锁之间的竞争和太多的上下文切换。
 *		如果想要处理成千上万的连接，非阻塞式 I/O 通常是更好的选择。
 *
 *	@author hzweiyongqiang
 */
public class Course08WhenWhere {

}
